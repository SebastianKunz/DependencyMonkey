<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net35;net40;net45;netstandard1.3;netstandard2.0</TargetFrameworks>

    <GeneratePackageOnBuild>$(Generate_QuikGraph_Core)</GeneratePackageOnBuild>

    <Title>QuikGraph</Title>
    <RootNamespace>QuikGraph</RootNamespace>
    <AssemblyName>QuikGraph</AssemblyName>

    <!-- Overridden by CI -->
    <Version>0.0.0</Version>
    <AssemblyVersion>0.0.0</AssemblyVersion>
    <FileVersion>0.0.0</FileVersion>

    <Copyright>Copyright © 2019</Copyright>
    <Description>.NET library that provide mainly graphs structures and algorithms for C#.

QuikGraph provides generic directed/undirected graph data structures and algorithms for .NET. It comes with algorithms such as depth first seach, breath first search, A* search, shortest path, k-shortest path, maximum flow, etc...

This package is a version of the original QuickGraph renamed QuikGraph and ported to .NET Core.
It should be seen as an alternative to the old frozen QuickGraph from CodePlex but with fixes.

It does not include every sub modules of the original library such as F# stuff, adapters, etc.
This build is only the Core of QuikGraph taking advantage of .NET Core.

Supported platforms:
- .NET Standard 1.3+
- .NET Core 1.0+
- .NET Framework 3.5+

Supports Source Link</Description>

    <IsPackable>true</IsPackable>
    <PackageId>QuikGraph</PackageId>
    <PackageReleaseNotes>➟ Release 2.5.0
Updates:
- Input type for transitive closure/reduction algorithms is more open (IEdgeListGraph rather than BidirectionalGraph).
- CryptoRandom no more use deprecate random number generator.
- Extends algorithms using CrytoRandom by default (CyclePoppingRandomTreeAlgorithm, MarkovEdgeChainBase, MinimumVertexCoverApproximationAlgorithm).

New:
- Add cycle checking for edge set and undirected graphs (DAG - Directed Acyclic Graph check).

Misc:
- Assembly is CLS compliant (Common Language Specification).</PackageReleaseNotes>
    <PackageTags>QuickGraph QuikGraph Graph Structure Algorithm C# .NET</PackageTags>
  </PropertyGroup>

  <!-- Targets defines -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net35'">
    <AssemblyTitle>QuikGraph .NET 3.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET35;SUPPORTS_SERIALIZATION;SUPPORTS_CLONEABLE;SUPPORTS_CONVERTER;SUPPORTS_TYPE_FULL_FEATURES;$(AdditionalConstants)</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net40'">
    <AssemblyTitle>QuikGraph .NET 4.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET40;SUPPORTS_SERIALIZATION;SUPPORTS_CLONEABLE;SUPPORTS_CONVERTER;SUPPORTS_TYPE_FULL_FEATURES;SUPPORTS_ENUMERABLE_COVARIANT;SUPPORTS_SORTEDSET;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net45'">
    <AssemblyTitle>QuikGraph .NET 4.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET45;SUPPORTS_SERIALIZATION;SUPPORTS_CLONEABLE;SUPPORTS_CONVERTER;SUPPORTS_TYPE_FULL_FEATURES;SUPPORTS_ENUMERABLE_COVARIANT;SUPPORTS_SORTEDSET;SUPPORTS_AGGRESSIVE_INLINING;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard1.3'">
    <AssemblyTitle>QuikGraph .NET Standard 1.3</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD1_3;SUPPORTS_ENUMERABLE_COVARIANT;SUPPORTS_SORTEDSET;SUPPORTS_AGGRESSIVE_INLINING;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard2.0'">
    <AssemblyTitle>QuikGraph .NET Standard 2.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD2_0;SUPPORTS_SERIALIZATION;SUPPORTS_CLONEABLE;SUPPORTS_CONVERTER;SUPPORTS_TYPE_FULL_FEATURES;SUPPORTS_ENUMERABLE_COVARIANT;SUPPORTS_SORTEDSET;SUPPORTS_AGGRESSIVE_INLINING;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
</Project>